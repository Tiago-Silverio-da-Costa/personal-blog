// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AdminAuditRecaptcha {
  id Int @id @default(autoincrement())

  action         String
  valid          Boolean
  invalidReason  String
  expectedAction String?
  score          Float?
  riskAnalysis   Json?

  ip        String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model User {
  id String @id @default(uuid())

  name           String
  email          String?               @unique
  emailVerified  DateTime?
  image          String?
  Posts          Post[]
  profession     Profession?           @relation(fields: [professionId], references: [id])
  auditRecaptcha AdminAuditRecaptcha[]
  professionId   String?
  Account        Account[]
  Session        Session[]
}

model Profession {
  id    String @id @default(uuid())
  name  String
  Posts Post[]
  Users User[]
}

model Theme {
  id    String @id @default(uuid())
  name  String
  Posts Post[]
}

model Post {
  id           String      @id @default(uuid())
  title        String
  subtitle     String
  content      String?
  author       User?       @relation(fields: [authorId], references: [id])
  authorId     String?
  profession   Profession? @relation(fields: [professionId], references: [id])
  professionId String?
  Theme        Theme?      @relation(fields: [themeId], references: [id])
  themeId      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
